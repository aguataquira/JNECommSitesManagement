@model JneCommSitesManagement.Models.CustomerModels
@using JneCommSitesManagement.Helper;

@{
    ViewBag.Title = "Edit Customer";
}

@{
    var queryCrewRol = Helper.GetCrewRoleByUser(User.Identity.Name);
    if (queryCrewRol != null)
    {
            Layout = "~/Views/Shared/_LayoutCrewJneCommSites.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_LayoutJneCommSites.cshtml";
    }

}

<h3 class="text-info"> Edit Customer</h3>
<label class="text-danger" id="lbError"></label>


    @using (Html.BeginForm("EditCustomer", "Administration", FormMethod.Post, new { id = "formEditCustomer" }))
    {
        @Html.AntiForgeryToken()

        <hr />
        <div class="panel panel-default">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="panel-heading">
                <h3 class="panel-title">Customer Information</h3>
            </div>
            <div class="panel-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.custumerName, htmlAttributes: new { @class = "col-md-8" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.custumerName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.custumerName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.customerAddress, htmlAttributes: new { @class = "col-md-8" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.customerAddress, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.customerAddress, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.states, htmlAttributes: new { @class = "col-md-8" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.states, new SelectList(Model._StatesList, "ID", "Description"), "--State--", new { style = "width: 300px; height: 30px;", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.states, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.customerCity, htmlAttributes: new { @class = "col-md-8" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.customerCity, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.customerCity, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

            </div>


            <div class="panel-heading">
                <h3 class="panel-title">Add Contact to Customer</h3>
            </div>
            <div class="panel-body">
                <table class="table table-striped .table-bordered">
                    <tr>
                        <th>
                            Contact Name
                        </th>
                        <th>
                            Contact Phone
                        </th>
                        <th>
                            Email address
                        </th>
                        <th>
                            Area
                        </th>
                        <th>
                            Action
                        </th>
                    </tr>
                    <tr ng-repeat="item in contacts">
                        <td>
                            {{item.contactName}}
                        </td>
                        <td>
                            {{item.contactPhone}}
                        </td>
                        <td>
                            {{item.contactEmail}}
                        </td>
                        <td>
                            {{item.contactArea}}
                        </td>
                        <td>
                            <input type="button" value="Remove" class="btn btn-primary" ng-click="removeRow(item.contactName)" />
                        </td>
                    </tr>
                </table>


                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="col-md-8">Contact Name</label>
                            <div class="col-md-10">
                                <input type="text" class="form-control" name="contactName" ng-model="contactName"/>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="col-md-8">Contact Phone</label>
                            <div class="col-md-10">
                                <input type="text" class="form-control" name="contactPhone" ng-model="contactPhone" />
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="col-md-8">Email</label>
                            <div class="col-md-10">
                                <input type="email" class="form-control" name="contactEmail" ng-model="contactEmail" />
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="col-md-12">Area</label>
                            <div class="col-md-10">
                                <input type="text" class="form-control" name="contactArea" ng-model="contactArea" />
                            </div>
                        </div>
                    </div>
                </div>
                <br />
                <div class="form-group">
                    <div class="col-md-offset-0 col-md-12">
                        <input type="button" class="btn btn-success" value="Add Contact" ng-click="addRow()" id="btAddRow" return false; />
                    </div>
                </div>

                <label class="label-info">Press the Save button after the add contacts.</label>
                <div class="form-group">
                    <div class="col-md-offset-0 col-md-10">
                        <input type="submit" value="Save" class="btn btn-primary" />
                    </div>
                </div>

            </div>
        </div>

    }


    <div>
        @Html.ActionLink("Back to List", "CustomersIndex")
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        @Scripts.Render("~/Scripts/angular.js")
        @Scripts.Render("~/Scripts/Json.js")

        <script>
            var batch = new Array();

            var helloApp = angular.module("JeCommAPP", []);
            helloApp.controller("JeCommController", function ($scope, $http) {

                $scope.contacts = [];

                $http({
                    method: 'GET',
                    url: '@Url.Action("GetContacsByCustomer")',
                    params: { customerName: $("#custumerName").val() },
                }).then(function successCallback(response) {
                    $scope.contacts = response.data;
                    for (i in response.data) {
                        //alert(response.data[i]["crewName"]);
                        batch.push({ 'contactName': response.data[i]["contactName"], 'contactPhone': response.data[i]["contactPhone"], 'contactEmail': response.data[i]["contactEmail"], 'contactArea': response.data[i]["contactArea"] })
                    }
                }, function errorCallback(response) {
                    
                });

                function isNumber(n) {
                    return !isNaN(parseFloat(n)) && isFinite(n);
                }

                $scope.addRow = function () {
                    if ($scope.contactName != null && $scope.contactPhone != null && $scope.contactEmail != null && $scope.contactArea != null)
                    {
                        if (isNumber($scope.contactPhone)) {
                            batch.push({ 'contactName': $scope.contactName, 'contactPhone': $scope.contactPhone, 'contactEmail': $scope.contactEmail, 'contactArea': $scope.contactArea });
                            $scope.contacts.push({ 'contactName': $scope.contactName, 'contactPhone': $scope.contactPhone, 'contactEmail': $scope.contactEmail, 'contactArea': $scope.contactArea });
                            $scope.contactName = '';
                            $scope.contactPhone = '';
                            $scope.contactEmail = '';
                            $scope.contactArea = '';
                        }
                        else {
                            $("#lbError").empty();
                            $("#lbError").append("Contact Phone should be a number");
                            $('html, body').animate({ scrollTop: 0 }, 'slow');
                        }
                    }
                    else
                    {
                        alert("Add the contact information");
                    }
               };

                $scope.removeRow = function (name) {
                    var index = -1;
                    var comArr = eval($scope.contacts);
                    for (var i = 0; i < comArr.length; i++) {
                        if (comArr[i].contactName === name) {
                            index = i;
                            break;
                        }
                    }
                    if (index === -1) {
                        alert("Something gone wrong");
                    }
                    $scope.contacts.splice(index, 1);
                    batch.splice(index, 1);
                };

            });


            $('#formEditCustomer').submit(function (event) {
                if ($('#formEditCustomer').valid()) {
                    event.preventDefault();

                    var transaction =
                    {
                        "_ListContacts": batch,
                        "custumerName": $("#custumerName").val(),
                        "customerAddress": $("#customerAddress").val(),
                        "states": $("#states").val(),
                        "customerCity": $("#customerCity").val()
                    }

                    var json = JSON.stringify(transaction);

                    $.ajax({
                        type: 'POST',
                        dataType: 'json',
                        contentType: 'application/json; charset=utf-8',
                        url: '@Url.Action("EditCustomer")',
                        data: json,
                        success: function (response) {
                            
                            if (response == true)
                                window.location = '@Url.Action("CustomersIndex", "Administration")';
                            else
                                $("#lbError").empty();
                                $("#lbError").append(response);
                                $('html, body').animate({ scrollTop: 0 }, 'slow');
                        }
                    });
                }
            });
        </script>
    }
